<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\RenderContext;
use Drupal\Core\Utility\Error as ErrorUtil;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\silverback_gutenberg\LinkProcessor;
use Drupal\user\Entity\Role;
use Drupal\user\UserInterface;

/**
 * Implements hook_default_content_exported_fields_alter().
 */
function custom_default_content_exported_fields_alter(array &$fields, ContentEntityInterface $entity) {

  // These change randomly and bring no value.
  unset(
    $fields['metatag'],
    $fields['external_preview_link'],
    $fields['access'],
    $fields['revision_translation_affected'],
    $fields['role_change'],
  );

  // If pathauto is enabled, content export may lose the path aliases.
  if (isset($fields['path'])) {
    if ($fields['path']->pathauto == 1) {
      $fields['path']->pathauto = 0;
    }
    foreach ($entity->getTranslationLanguages(FALSE) as $langcode => $_) {
      $translation = $entity->getTranslation($langcode);
      if ($translation->get('path')->pathauto == 1) {
        $translation->get('path')->pathauto = 0;
      }
    }
  }
}

/**
 * Implements hook_silverback_gutenberg_link_processor_outbound_url_alter().
 */
function custom_silverback_gutenberg_link_processor_outbound_url_alter(
  string &$url,
  LanguageInterface $language,
  LinkProcessor $linkProcessor
) {

  // For some links pointing to media, we want to print the direct file URL
  // instead of the media route.
  if (preg_match('#^(/[a-z]{2})?/media/([0-9]+)(/edit)?$#', $url, $matches)) {
    $mediaBundles = ['document'];
    \Drupal::service('renderer')->executeInRenderContext(
      new RenderContext(),
      function () use (&$url, $matches, $language, $mediaBundles) {
        $mediaId = $matches[2];
        try {
          /** @var \Drupal\media\MediaInterface $media */
          $media = Media::load($mediaId);
          if (
            $language->getId() !== $media->language()->getId() &&
            $media->hasTranslation($language->getId())
          ) {
            $media = $media->getTranslation($language->getId());
          }
          if (
            in_array($media->bundle(), $mediaBundles) &&
            $media->access('view')
          ) {
            $source = $media->getSource()->getSourceFieldValue($media);
            $file = File::load($source);
            $url = $file->createFileUrl();
          }
        } catch (\Throwable $e) {
          \Drupal::logger('custom')->error(
            'Error turning media (id: "{mediaId}") route into file url. Error: {error}',
            [
              'mediaId' => $mediaId,
              'error' => ErrorUtil::renderExceptionSafe($e),
            ]
          );
        }
      }
    );
  }
}

/**
 * Implements hook_form_alter().
 *
 * Executed at the very late stage.
 * @see custom_heavy_module_implements_alter
 */
function custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $gutenbergModeratedForms = ['node_page_form', 'node_page_edit_form'];
  if (in_array($form_id, $gutenbergModeratedForms) && array_key_exists('moderation_state', $form)) {

    // Move the moderation state widget on pages into the gutenberg sidebar.
    $form['moderation_state']['#group'] = 'meta';
    // For some reason the above method does not work for regular fields.
    // But we need to move metatags into the sidebar as well.
    $form['meta']['field_metatags'] = $form['field_metatags'];
    unset($form['field_metatags']);

    // If the "More settings" fieldset is empty, remove it completely.
    $metaboxHasFields = FALSE;
    foreach (Element::children($form) as $key) {
      if (($form[$key]['#group'] ?? '') === 'metabox_fields') {
        $metaboxHasFields = TRUE;
        break;
      }
    }
    if (!$metaboxHasFields && isset($form['#fieldgroups'])) {
      foreach ($form['#fieldgroups'] as $group) {
        if (($group->parent_name ?? '') === 'metabox_fields') {
          $metaboxHasFields = TRUE;
          break;
        }
      }
    }
    if (!$metaboxHasFields) {
      unset($form['metabox_fields']);
    }
  }
}

/**
 * Custom access check for key_auth.user_key_auth_form route.
 *
 * We can possibly remove this if #3261708 is solved.
 * https://www.drupal.org/project/key_auth/issues/3261708#comment-15035737
 */
function _custom_key_auth_form_access(UserInterface $user): AccessResult {
  $access = AccessResult::forbidden();
  if (\Drupal::currentUser()->id() == 1) {
    $access = AccessResult::allowed();
  } else {
    $roleIds = \Drupal::currentUser()->getRoles();
    if ($roleIds) {
      foreach (Role::loadMultiple($roleIds) as $role) {
        if ($role->isAdmin()) {
          $access = AccessResult::allowed();
          break;
        }
      }
    }
  }
  $access->addCacheContexts(['user.permissions']);
  $access->addCacheableDependency($user);
  return $access;
}
