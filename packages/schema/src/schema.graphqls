scalar Url @default @value(json: "\"\"")
scalar Markup @default @value(json: "\"\"")
scalar ImageSource @default @value(json: "\"\"")

enum Locale @default @value(json: "\"en\"") {
  en
  de
}

"""
A single navigation item. Can be available in multiple languages
and nested into a tree structure. The tree structure is not modeled
in the GraphQL schema since it does not allow recursive fragments. Instead
the consumer should use the `parent` field to traverse the tree.
"""
type NavigationItem {
  id: ID! @resolveMenuItemId
  parent: ID @resolveMenuItemParentId
  title: String! @resolveMenuItemLabel
  target: Url! @resolveMenuItemUrl
}

interface Navigation {
  items: [NavigationItem]!
}

type MainNavigation implements Navigation @menu(menu_id: "main") {
  items: [NavigationItem]! @lang @resolveMenuItems
}

type FooterNavigation implements Navigation @menu(menu_id: "footer") {
  items: [NavigationItem]! @lang @resolveMenuItems
}

"""
A generic page.
"""
type Page @entity(type: "node", bundle: "page") {
  locale: Locale! @resolveEntityLanguage
  path: String! @resolveEntityPath @isPath
  title: String! @resolveProperty(path: "title.value")
  content: [PageContent]!
    @resolveEditorBlocks(
      path: "body.value"
      aggregated: ["core/paragraph", "core/list"]
      ignored: ["core/group"]
    )
}

union PageContent @resolveEditorBlockType = BlockText | BlockImage

type BlockText @type(id: "core/paragraph") {
  markup: Markup! @resolveEditorBlockMarkup
}

type BlockImage @type(id: "drupalmedia/drupal-media-entity") {
  source: ImageSource!
    @value(json: "{ \"src\": \"https://picsum.photos/200\" }") # TODO: Implement a real thing.
  alt: String!
    @resolveEditorBlockMedia
    @resolveProperty(path: "field_media_image.alt")
  caption: Markup @resolveEditorBlockAttribute(key: "caption")
}

type Query {
  previewPage(id: ID!, locale: Locale!): Page
    @loadEntity(type: "node", id: "$id")
    @resolveEntityTranslation(lang: "$locale")
}
