scalar Url @default @value(json: "\"\"")
scalar Markup @default @value(json: "\"\"")
scalar ImageSource @default @value(json: "\"\"")

enum Locale @default @value(json: "\"en\"") {
  en
  de
}

"""
Inteface for anything that can appear in the content hub.
"""
interface ContentHubResultItem @resolveEntityBundle {
  path: Url!
  title: String!
  teaserImage: MediaImage
}

type ContentHubResult @default @value(json: "{\"total\": 0, \"items\": []}") {
  total: Int!
  items: [ContentHubResultItem]!
}

type WebsiteSettings
  @entity(type: "config_pages", bundle: "website_settings", access: false) {
  homePage: Page @resolveEntityReference(field: "field_home_page") @seek(pos: 0)
  notFoundPage: Page
    @resolveEntityReference(field: "field_404_page")
    @seek(pos: 0)
}

"""
A single navigation item. Can be available in multiple languages
and nested into a tree structure. The tree structure is not modeled
in the GraphQL schema since it does not allow recursive fragments. Instead
the consumer should use the `parent` field to traverse the tree.
"""
type NavigationItem {
  id: ID! @resolveMenuItemId
  parent: ID @resolveMenuItemParentId
  title: String! @resolveMenuItemLabel
  target: Url! @resolveMenuItemUrl
}

interface Navigation {
  items: [NavigationItem]!
}

type MainNavigation implements Navigation @menu(menu_id: "main") {
  items: [NavigationItem]! @lang @resolveMenuItems
}

type FooterNavigation implements Navigation @menu(menu_id: "footer") {
  items: [NavigationItem]! @lang @resolveMenuItems
}

"""
A generic page.
"""
type Page implements ContentHubResultItem
  @entity(type: "node", bundle: "page")
  @type(id: "page") {
  locale: Locale! @resolveEntityLanguage
  path: Url! @resolveEntityPath @isPath
  title: String! @resolveProperty(path: "title.value")
  teaserImage: MediaImage
    @resolveEditorBlocks(path: "body.value")
    @seek(pos: 0)
    @resolveEditorBlockMedia
  hero: Hero @resolveEditorBlocks(path: "body.value") @seek(pos: 0)
  content: [PageContent]
    @resolveEditorBlocks(
      path: "body.value"
      aggregated: [
        "core/paragraph"
        "core/list"
        "core/table"
        "core/quote"
        "custom/heading"
      ]
      ignored: ["core/group"]
    )
    @seek(pos: 1)
    @resolveEditorBlockChildren
}

type Hero {
  headline: String! @resolveEditorBlockAttribute(key: "headline")
  lead: String @resolveEditorBlockAttribute(key: "lead")
  image: MediaImage @resolveEditorBlockMedia
}

union PageContent @resolveEditorBlockType = BlockMarkup | BlockMedia

type BlockMarkup @type(id: "core/paragraph") {
  markup: Markup! @resolveEditorBlockMarkup
}

union Media @resolveEntityBundle = MediaImage | MediaVideo

type MediaImage @type(id: "image") @entity(type: "media", bundle: "image") {
  source(width: Int, height: Int, sizes: [[Int!]!]): ImageSource!
    @resolveProperty(path: "field_media_image.entity")
    @imageProps
    @responsiveImage(height: "$height", width: "$width", sizes: "$sizes")
  alt: String! @resolveProperty(path: "field_media_image.alt")
}

type MediaVideo @type(id: "video") @entity(type: "media", bundle: "video") {
  url: Url! @resolveProperty(path: "field_media_video_file.entity") @imageUrl
}

type BlockMedia @type(id: "drupalmedia/drupal-media-entity") {
  media: Media @resolveEditorBlockMedia
  caption: Markup @resolveEditorBlockAttribute(key: "caption")
}

input PaginationInput {
  limit: Int!
  offset: Int!
}

type Query {
  previewPage(id: ID!, rid: ID, locale: String!): Page
    @fetchEntity(type: "node", id: "$id", rid: "$rid", language: "$locale")
  contentHub(query: String, pagination: PaginationInput!): ContentHubResult!
    @contentHub
}
