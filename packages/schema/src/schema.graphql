scalar Url @default @value(string: "")
scalar Markup @default @value(string: "")
scalar ImageSource @default @value(string: "")
scalar JSONString @default @value(string: "{}")

"""
implementation(drupal): custom.menus::getMenuTranslations
"""
directive @menuTranslations(menu_id: String!) on FIELD_DEFINITION

"""
implementation(drupal): custom.webform::url
"""
directive @webformIdToUrl(id: String!) on FIELD_DEFINITION

"""
implementation(drupal): custom.webform::createSubmission
"""
directive @createWebformSubmission(
  webformId: String!
  submittedData: JSONString!
) on FIELD_DEFINITION

"""
Retrieve the properties of an image.
TODO: Move to a shared "image" package.

implementation(gatsby): ./image.js#imageProps
"""
directive @imageProps repeatable on FIELD_DEFINITION | SCALAR | UNION | ENUM | INTERFACE | OBJECT

"""
Retrieve the properties of an image.
TODO: Move to a shared "image" package.

implementation(gatsby): @amazeelabs/gatsby-source-silverback#responsiveImageSharp
"""
directive @responsiveImage(
  height: String
  sizes: String
  transform: String
  width: String
) repeatable on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR | UNION

"""
Retrieve an entity from the Gatsby datastore.
For Drupal, this is implicitly implemented in the "graphql_directives" module.

implementation(gatsby): ./page.js#loadEntity
"""
directive @loadEntity(
  id: String
  operation: String
  route: String
  type: String
  uuid: String
) repeatable on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR | UNION

"""
Retrieve all translations of a decap page.

implementation(gatsby): ./page.js#decapTranslations
"""
directive @decapPageTranslations on FIELD_DEFINITION

"""
Parse a given Url.
For Drupal, this is implicitly implemented in the "grraphql_directives" module.

implementation(gatsby): ./page.js#route
"""
directive @route(
  path: String!
) repeatable on FIELD_DEFINITION | SCALAR | UNION | ENUM | INTERFACE | OBJECT

enum Locale @default @value(string: "en") {
  en
  de
}

"""
Inteface for anything that can appear in the content hub.
"""
interface ContentHubResultItem @resolveEntityBundle {
  path: Url!
  title: String!
  teaserImage: MediaImage
}

type ContentHubResult @default @value(json: "{\"total\": 0, \"items\": []}") {
  total: Int!
  items: [ContentHubResultItem]! @prop(key: "rows")
}

type WebsiteSettings
  @entity(type: "config_pages", bundle: "website_settings", access: false) {
  homePage: Page @resolveEntityReference(field: "field_home_page") @seek(pos: 0)
  notFoundPage: Page
    @resolveEntityReference(field: "field_404_page")
    @seek(pos: 0)
}

"""
A single navigation item. Can be available in multiple languages
and nested into a tree structure. The tree structure is not modeled
in the GraphQL schema since it does not allow recursive fragments. Instead
the consumer should use the `parent` field to traverse the tree.
"""
type NavigationItem {
  id: ID! @resolveMenuItemId
  parent: ID @resolveMenuItemParentId
  title: String! @resolveMenuItemLabel
  target: Url! @resolveMenuItemUrl
}

interface Navigation {
  locale: Locale!
  items: [NavigationItem]!
}

type MainNavigation implements Navigation @menu(menu_id: "main") {
  locale: Locale! @resolveEntityLanguage
  items: [NavigationItem]! @lang @resolveMenuItems
}

type FooterNavigation implements Navigation @menu(menu_id: "footer") {
  locale: Locale! @resolveEntityLanguage
  items: [NavigationItem]! @lang @resolveMenuItems
}

interface Page implements ContentHubResultItem @resolveEntityBundle {
  id: ID!
  translations: [Page]
  locale: Locale!
  path: Url!
  title: String!
  teaserImage: MediaImage
  hero: Hero
  content: [PageContent]
  metaTags: [MetaTag]
}

type DecapPage implements ContentHubResultItem & Page
  @sourceFrom(fn: "getPages") {
  id: ID!
  translations: [Page] @decapPageTranslations
  locale: Locale!
  path: Url!
  title: String!
  teaserImage: MediaImage
  hero: Hero
  content: [PageContent]
  metaTags: [MetaTag]
}

"""
A generic page.
"""
type DrupalPage implements ContentHubResultItem & Page
  @entity(type: "node", bundle: "page")
  @type(id: "page") {
  id: ID! @resolveEntityUuid
  locale: Locale! @resolveEntityLanguage
  translations: [Page] @resolveEntityTranslations
  path: Url! @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  teaserImage: MediaImage
    @resolveEditorBlocks(path: "body.value")
    @seek(pos: 0)
    @resolveEditorBlockMedia
  hero: Hero @resolveEditorBlocks(path: "body.value") @seek(pos: 0)
  content: [PageContent]
    @lang
    @resolveEditorBlocks(
      path: "body.value"
      aggregated: [
        "core/paragraph"
        "core/list"
        "core/table"
        "core/quote"
        "custom/heading"
      ]
      ignored: ["core/group"]
    )
    @seek(pos: 1)
    @resolveEditorBlockChildren
  metaTags: [MetaTag] @resolveProperty(path: "metatag")
}

type Hero {
  headline: String! @resolveEditorBlockAttribute(key: "headline")
  lead: String @resolveEditorBlockAttribute(key: "lead")
  image: MediaImage @resolveEditorBlockMedia
  ctaText: String @resolveEditorBlockAttribute(key: "ctaText")
  ctaUrl: Url @resolveEditorBlockAttribute(key: "ctaUrl")
  formUrl: Url
    @resolveEditorBlockAttribute(key: "formId")
    @webformIdToUrl(id: "$")
}

union PageContent @resolveEditorBlockType =
  | BlockMarkup
  | BlockMedia
  | BlockForm
  | BlockImageTeasers
  | BlockCta
  | BlockImageWithText
  | BlockQuote
  | BlockHorizontalSeparator
  | BlockAccordion

type BlockForm @type(id: "custom/form") {
  url: Url @resolveEditorBlockAttribute(key: "formId") @webformIdToUrl(id: "$")
}

type BlockMarkup @type(id: "core/paragraph") {
  markup: Markup! @resolveEditorBlockMarkup
}

union Media @resolveEntityBundle = MediaImage | MediaVideo

type MediaImage @type(id: "image") @entity(type: "media", bundle: "image") {
  source(width: Int, height: Int, sizes: [[Int!]!]): ImageSource!
    @resolveProperty(path: "field_media_image.entity")
    @imageProps
    @responsiveImage(height: "$height", width: "$width", sizes: "$sizes")
  alt: String! @resolveProperty(path: "field_media_image.alt")
}

type MediaVideo @type(id: "video") @entity(type: "media", bundle: "video") {
  url: Url! @resolveProperty(path: "field_media_video_file.entity") @imageUrl
}

type BlockMedia @type(id: "drupalmedia/drupal-media-entity") {
  media: Media @resolveEditorBlockMedia
  caption: Markup @resolveEditorBlockAttribute(key: "caption")
}

type BlockImageTeasers @type(id: "custom/image-teasers") {
  teasers: [BlockImageTeaser!]! @resolveEditorBlockChildren
}

type BlockImageTeaser @default @value {
  image: MediaImage @resolveEditorBlockMedia
  title: String @resolveEditorBlockAttribute(key: "title")
  ctaText: String @resolveEditorBlockAttribute(key: "ctaText")
  ctaUrl: Url @resolveEditorBlockAttribute(key: "ctaUrl")
}

type BlockAccordion @type(id: "custom/accordion") {
  items: [BlockAccordionItem]! @resolveEditorBlockChildren
}

interface BlockAccordionItemInterface {
  title: String!
}

union BlockAccordionItem @resolveEditorBlockType = BlockAccordionItemText

type BlockAccordionItemText implements BlockAccordionItemInterface
  @type(id: "custom/accordion-item-text") {
  title: String! @resolveEditorBlockAttribute(key: "title")
  icon: String! @resolveEditorBlockAttribute(key: "icon")
  # @todo check if we want inner blocks here.
  text: String! @resolveEditorBlockAttribute(key: "text")
}

type BlockCta @type(id: "custom/cta") {
  url: Url @resolveEditorBlockAttribute(key: "url")
  text: String @resolveEditorBlockAttribute(key: "text")
  openInNewTab: Boolean @resolveEditorBlockAttribute(key: "openInNewTab")
  icon: CTAIconType @resolveEditorBlockAttribute(key: "icon")
  iconPosition: CTAIconPosition
    @resolveEditorBlockAttribute(key: "iconPosition")
}

enum CTAIconType {
  NONE
  ARROW
}

enum CTAIconPosition {
  AFTER
  BEFORE
}

type BlockImageWithText @type(id: "custom/image-with-text") {
  image: MediaImage @resolveEditorBlockMedia
  imagePosition: ImagePosition!
    @resolveEditorBlockAttribute(key: "imagePosition")
  textContent: BlockMarkup @resolveEditorBlockChildren @seek(pos: 0)
}

enum ImagePosition @default @value(string: "left") {
  left
  right
}

type BlockQuote @type(id: "custom/quote") {
  quote: Markup @resolveEditorBlockAttribute(key: "quote")
  author: String @resolveEditorBlockAttribute(key: "author")
  role: String @resolveEditorBlockAttribute(key: "role")
  image: MediaImage @resolveEditorBlockMedia
}

type BlockHorizontalSeparator @type(id: "custom/horizontal-separator") {
  markup: Markup! @resolveEditorBlockMarkup
}

input PaginationInput {
  limit: Int!
  offset: Int!
}

type Query {
  previewDecapPage: DecapPage
  previewDrupalPage(id: ID!, rid: ID, locale: String!): DrupalPage
    @fetchEntity(type: "node", id: "$id", rid: "$rid", language: "$locale")

  mainNavigations: [MainNavigation]
    @gatsbyNodes(type: "MainNavigation")
    @menuTranslations(menu_id: "main")

  footerNavigations: [FooterNavigation]
    @gatsbyNodes(type: "FooterNavigation")
    @menuTranslations(menu_id: "footer")

  allPages: [Page] @gatsbyNodes(type: "Page")
  websiteSettings: WebsiteSettings
  viewPage(path: String!): Page @route(path: "$path") @loadEntity

  contentHub(locale: Locale!, args: String): ContentHubResult!
    @lang(code: "$locale")
    @drupalView(id: "content_hub:default", args: "$args")

  stringTranslations: [TranslatableString!]
    @gatsbyNodes(type: "TranslatableString")
}

type Mutation {
  createWebformSubmission(
    webformId: String!
    submittedData: JSONString!
  ): WebformSubmissionCreateResponse
    @createWebformSubmission(
      webformId: "$webformId"
      submittedData: "$submittedData"
    )
}

type WebformSubmissionCreateResponse {
  errors: [MutationError]
  submission: JSONString
}

type MutationError {
  message: String!
  key: String!
  field: String
}

type MetaTag {
  tag: String!
  attributes: MetaTagAttributes!
}

type MetaTagAttributes @default @value(json: "{}") {
  name: String
  content: String
  property: String
  rel: String
  href: String
}

type DemoBlock {
  heading: String!
  description: Markup
  image: MediaImage
  url: Url!
}

"""
The type provided by translations source (e.g. Decap or Drupal).
Ingested by @mergeTranslatableStrings which handles priorities.
"""
interface TranslatableString @default @value {
  """
  The default message, used in the UI.
  """
  source: String!
  """
  The language of this translation.
  """
  language: Locale!
  """
  The actual translated string.
  """
  translation: String
}

type DecapTranslatableString implements TranslatableString
  @sourceFrom(fn: "getTranslatables") {
  source: String!
  language: Locale!
  translation: String
}

type DrupalTranslatableString implements TranslatableString
  @translatableString(contextPrefix: "gatsby") {
  source: String!
  language: Locale!
  translation: String
}
